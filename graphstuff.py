import matplotlib.pyplot as plt
import json
import numpy as np
from datetime import datetime, timedelta

import zhmiscellany, os, random
from PIL import Image, ImageDraw
from matplotlib.offsetbox import OffsetImage, AnnotationBbox

data = [('966293314418642964', '[["2024-09-02 13", 1], ["2024-09-02 13", 5], ["2024-09-02 18", 8], ["2024-09-04 08", 9]]'),
('1012042936294318120', '[["2024-09-02 13", 1]]'),
('688801726672797737', '[["2024-09-02 14", 2]]'),
('996806695089094656', '[["2024-09-02 14", 6], ["2024-09-02 15", 6], ["2024-09-02 18", 8], ["2024-09-03 05", 2], ["2024-09-03 16", 7]]'),
('1057057362613112862', '[["2024-09-02 14", 2], ["2024-09-04 17", 2], ["2024-09-17 07", 2]]'),
('306057389235240962', '[["2024-09-02 14", 5]]'),
('768028545900871680', '[["2024-09-02 14", 2], ["2024-09-03 09", 3], ["2024-09-03 13", 8], ["2024-09-05 09", 2], ["2024-09-05 09", 5]]'),
('461033893919981568', '[["2024-09-02 14", 5], ["2024-09-03 01", 8], ["2024-09-04 04", 9]]'),
('1092155690962923550', '[["2024-09-02 14", 7], ["2024-09-02 15", 9]]'),
('732580121831145562', '[["2024-09-02 14", 1], ["2024-09-07 04", 12]]'),
('876043963893682187', '[["2024-09-02 14", 16]]'),
('804265795835265034', '[["2024-09-02 14", 5], ["2024-09-03 04", 4]]'),
('463500020058947605', '[["2024-09-02 15", 2], ["2024-09-04 13", 7]]'),
('791412173188366386', '[["2024-09-02 15", 1], ["2024-09-02 15", 6]]'),
('1027200344276602880', '[["2024-09-02 15", 5], ["2024-09-03 12", 6]]'),
('932314185709256814', '[["2024-09-02 15", 3]]'),
('914045766748745740', '[["2024-09-02 15", 3]]'),
('1123489248197214218', '[["2024-09-02 15", 4], ["2024-09-02 15", 5], ["2024-09-02 15", 4], ["2024-09-05 02", 5], ["2024-09-16 04", 4]]'),
('628606843199029269', '[["2024-09-02 15", 13], ["2024-09-03 01", 5], ["2024-09-04 07", 6], ["2024-09-05 04", 6], ["2024-09-06 06", 9], ["2024-09-07 13", 6], ["2024-09-08 01", 9], ["2024-09-09 10", 25], ["2024-09-10 13", 10], ["2024-09-11 13", 4], ["2024-09-22 14", 16], ["2024-09-23 13", 10], ["2024-09-28 12", 19]]'),
('708566004644446292', '[["2024-09-02 16", 13]]'),
('753316274116886629', '[["2024-09-02 16", 11], ["2024-09-03 10", 11], ["2024-09-03 14", 17], ["2024-09-04 15", 19], ["2024-09-05 06", 15], ["2024-09-05 06", 2], ["2024-09-05 06", 5], ["2024-09-05 12", 13], ["2024-09-06 14", 8], ["2024-09-07 14", 10], ["2024-09-08 15", 26], ["2024-09-14 11", 28], ["2024-09-30 16", 13]]'),
('860263191132504066', '[["2024-09-02 16", 8]]'),
('627998090208608277', '[["2024-09-02 17", 6], ["2024-09-03 15", 9], ["2024-09-04 21", 11]]'),
('871527570263396403', '[["2024-09-02 17", 5], ["2024-09-03 19", 5], ["2024-09-04 17", 4], ["2024-09-05 20", 8], ["2024-09-06 18", 4]]'),
('712767410251366511', '[["2024-09-02 18", 5]]'),
('916231978070704148', '[["2024-09-02 18", 3], ["2024-09-02 18", 4], ["2024-09-03 18", 6], ["2024-09-05 18", 9], ["2024-09-12 07", 4]]'),
('1083061691429961748', '[["2024-09-02 19", 6], ["2024-09-03 07", 7], ["2024-09-03 15", 8], ["2024-09-04 18", 10], ["2024-09-05 17", 9], ["2024-09-07 20", 14], ["2024-09-08 12", 8], ["2024-09-11 14", 10], ["2024-09-14 18", 8], ["2024-09-18 14", 4]]'),
('533726992692936705', '[["2024-09-02 19", 10], ["2024-09-03 15", 5]]'),
('818185963754618941', '[["2024-09-02 20", 9]]'),
('764999161728598056', '[["2024-09-02 20", 4], ["2024-09-03 19", 9]]'),
('1170785793850228847', '[["2024-09-02 21", 8], ["2024-09-06 20", 6]]'),
('842040214192652328', '[["2024-09-02 22", 4]]'),
('695117838729347093', '[["2024-09-02 22", 8], ["2024-09-03 16", 8]]'),
('821658380925796363', '[["2024-09-02 22", 6]]'),
('900313715583373312', '[["2024-09-02 23", 9], ["2024-09-07 09", 10]]'),
('616745165180108814', '[["2024-09-02 23", 3], ["2024-09-03 13", 6], ["2024-09-04 10", 5], ["2024-09-04 20", 14], ["2024-09-12 18", 27], ["2024-09-13 08", 34]]'),
('757614938335215739', '[["2024-09-02 23", 2], ["2024-09-04 14", 8], ["2024-09-04 23", 8], ["2024-09-06 14", 5], ["2024-09-07 13", 14], ["2024-09-08 13", 16], ["2024-09-09 13", 15], ["2024-09-11 11", 10], ["2024-09-13 14", 18], ["2024-09-14 13", 18], ["2024-09-16 13", 9], ["2024-09-17 14", 14], ["2024-09-19 13", 1], ["2024-09-21 13", 11], ["2024-09-22 13", 6]]'),
('894261248764567592', '[["2024-09-02 23", 4], ["2024-09-03 23", 5], ["2024-09-05 06", 8]]'),
('727957439277695109', '[["2024-09-03 00", 8]]'),
('811355270990397481', '[["2024-09-03 00", 6]]'),
('582309012293287956', '[["2024-09-03 00", 13], ["2024-09-03 16", 10], ["2024-09-04 14", 15], ["2024-09-05 15", 13], ["2024-09-07 13", 9], ["2024-09-07 14", 12], ["2024-09-09 19", 14], ["2024-09-11 17", 27], ["2024-09-14 23", 14], ["2024-09-16 23", 11], ["2024-09-20 21", 12], ["2024-09-22 01", 27], ["2024-09-24 16", 13], ["2024-09-25 19", 12], ["2024-09-29 18", 21], ["2024-10-01 18", 27]]'),
('863090557327900702', '[["2024-09-03 01", 5], ["2024-09-07 13", 13]]'),
('900950942722174997', '[["2024-09-03 02", 7]]'),
('399378126595162132', '[["2024-09-03 02", 7], ["2024-09-05 11", 18], ["2024-09-06 12", 19], ["2024-09-27 09", 33]]'),
('363735976297627658', '[["2024-09-03 02", 16], ["2024-09-06 14", 15]]'),
('1076164747726164018', '[["2024-09-03 03", 3], ["2024-09-04 14", 7]]'),
('1262825746645254186', '[["2024-09-03 05", 4]]'),
('1156266195905953894', '[["2024-09-03 05", 4], ["2024-09-04 13", 4], ["2024-09-06 14", 4], ["2024-09-14 13", 5]]'),
('1154009648928661566', '[["2024-09-03 06", 6]]'),
('900126154881646634', '[["2024-09-03 08", 6], ["2024-09-05 10", 4]]'),
('812655584062734347', '[["2024-09-03 09", 6]]'),
('1134108698445361204', '[["2024-09-03 09", 11]]'),
('407962259789185025', '[["2024-09-03 09", 7], ["2024-09-04 08", 9]]'),
('503295416159174686', '[["2024-09-03 11", 14], ["2024-09-04 13", 20], ["2024-09-07 09", 14]]'),
('991852505065594931', '[["2024-09-03 15", 2]]'),
('622848160951304202', '[["2024-09-03 15", 9], ["2024-09-05 13", 16], ["2024-09-05 18", 14], ["2024-09-07 13", 13]]'),
('1038202283042807929', '[["2024-09-03 17", 4]]'),
('875488443843641414', '[["2024-09-03 17", 4]]'),
('1167595787656634478', '[["2024-09-03 18", 2]]'),
('905201120182403092', '[["2024-09-03 18", 7]]'),
('689965037007142991', '[["2024-09-03 19", 4], ["2024-09-04 13", 5], ["2024-09-04 13", 8]]'),
('1095534427074990100', '[["2024-09-04 00", 6], ["2024-09-09 22", 6]]'),
('817103934833295371', '[["2024-09-04 05", 6], ["2024-09-15 06", 7]]'),
('1102742865987260437', '[["2024-09-04 08", 5]]'),
('904079269389565993', '[["2024-09-04 09", 7]]'),
('875494391807094824', '[["2024-09-04 09", 7]]'),
('816269628040544257', '[["2024-09-04 15", 9]]'),
('769242588523790398', '[["2024-09-04 21", 13], ["2024-09-04 23", 6], ["2024-09-05 23", 13], ["2024-09-06 21", 21], ["2024-09-09 23", 23]]'),
('671266884124934154', '[["2024-09-05 23", 9], ["2024-09-06 16", 10]]'),
('1063916409937203321', '[["2024-09-06 07", 5], ["2024-09-06 15", 8], ["2024-09-09 21", 5]]'),
('760395452469215275', '[["2024-09-06 18", 7]]'),
('968727733599346698', '[["2024-09-06 18", 11]]'),
('950343368335048724', '[["2024-09-07 09", 5]]'),
('1143362164418162748', '[["2024-09-07 14", 1], ["2024-09-07 14", 2], ["2024-09-07 14", 5], ["2024-09-07 14", 6], ["2024-09-07 15", 7], ["2024-09-08 20", 8]]'),
('1165040621443108955', '[["2024-09-07 15", 6]]'),
('1031750774016974878', '[["2024-09-07 16", 5], ["2024-09-08 09", 9], ["2024-09-09 17", 12], ["2024-09-11 19", 11]]'),
('1265179736217223183', '[["2024-09-07 21", 2]]'),
('1131586555425865928', '[["2024-09-09 22", 7]]'),
('763341222533529601', '[["2024-09-09 23", 7]]'),
('1210838331575894066', '[["2024-09-10 03", 3]]'),
('1126174550799962353', '[["2024-09-10 06", 7]]'),
('1025820372727250974', '[["2024-09-11 03", 5]]'),
('1258216140983762985', '[["2024-09-13 22", 5]]'),
('830576929673183243', '[["2024-09-14 13", 6]]'),
('448174855427325964', '[["2024-09-15 04", 7], ["2024-09-18 11", 6]]'),
('1044230511108816956', '[["2024-09-15 20", 3]]'),
('831116230281920533', '[["2024-09-16 06", 3]]'),
('1138948656360337510', '[["2024-09-16 20", 4]]'),
('1267205776884105360', '[["2024-09-20 07", 2]]'),
('788772512389529643', '[["2024-09-22 09", 4]]'),
('1220674744857268245', '[["2024-09-22 10", 5], ["2024-09-24 05", 7], ["2024-09-25 02", 11]]'),
('296720608119619584', '[["2024-09-25 16", 9]]'),
('1115552106624061490', '[["2024-10-01 08", 5]]'),
]
combination_group_id = ('1089164363765645374', '915944758617194526', '399378126595162132', '875494391807094824', '1262825746645254186', '1012042936294318120,' '916231978070704148', '831116230281920533', '764999161728598056', '1272481987889856646', '768028545900871680', '616745165180108814', '582309012293287956', '1123489248197214218', '1133688944194769016', '628606843199029269', '791412173188366386', '871527570263396403', '1027544993285554198', '802150968263049237', '1044230511108816956', '260369324567560192')

visual_group_id = ('1089164363765645374', '688801726672797737', '627998090208608277', '1119977014607220787', '1143362164418162748', '1013736182246539386', '1031750774016974878', '448019692146262016', '788772512389529643', '448019692146262016', '874639428117753896', '1027200344276602880', '689965037007142991', '1070016088626167878', '757614938335215739', '811355270990397481', '900126154881646634', '799372694604087367', '778210728032206859', '1167595787656634478', '870675550384037908', '961995253806678087', '1138948656360337510', '1102742865987260437')
combination_group = True

if combination_group:
    for point in range(len(data) - 1, -1, -1):
        if data[point][0] in combination_group_id:
            del data[point]

def hue_shift(image, shift_value=None):
    img_hsv = image.convert('HSV')
    np_img = np.array(img_hsv)
    hue_channel = np_img[:, :, 0]
    if shift_value is None:
        shift_value = random.randint(0, 360)
    hue_channel = (hue_channel.astype(int) + shift_value) % 256
    np_img[:, :, 0] = hue_channel
    img_hue_shifted = Image.fromarray(np_img, 'HSV').convert('RGB')
    return img_hue_shifted

def create_circular_image(image):
    image = image.convert("RGBA")
    mask = Image.new("L", image.size, 0)
    draw = ImageDraw.Draw(mask)
    draw.ellipse((0, 0, image.size[0], image.size[1]), fill=255)
    result = Image.new("RGBA", image.size)
    result.paste(image, (0, 0), mask)
    return result

plt.figure(figsize=(12, 8))
colors = plt.cm.viridis(np.linspace(0, 1, len(data)))
start_date = datetime(2024, 9, 2)
end_date = datetime(2024, 10, 1)
date_range = (end_date - start_date).days
combined_x = []
combined_y = []

random.seed(457678824456425)

images = {}
for image in zhmiscellany.fileio.abs_listdir(r"E:\vscode yap\avatars"):
    img = Image.open(image)
    img = img.convert("RGB")
    if img.size == (256, 256):
        img = hue_shift(img)
    img = img.resize((128, 128))
    img = create_circular_image(img)
    img = np.asarray(img)
    images[os.path.splitext(os.path.basename(image))[0]] = img

use_date_as_x = False

for color, (user_id, raw_points) in zip(colors, data):
    points = json.loads(raw_points)
    if use_date_as_x:
            x = [
                (datetime.strptime(point[0], "%Y-%m-%d %H") - start_date).days + 
                (datetime.strptime(point[0], "%Y-%m-%d %H").hour / 24)
                for point in points
            ]

    else:
        num_points = len(points)
        if num_points == 1:
            x = [0]
        else:
            x = [i * (date_range / (num_points - 1)) for i in range(num_points)]
            if x[1] != 0.0:
                x[1] = 0.0
    y = [point[1] for point in points]
    if user_id not in list(images.keys()):
        user_id = list(images.keys())[0]
    imagebox = OffsetImage(images[user_id], zoom=0.1)
    for x_point, y_point in zip(x, y):
        ab = AnnotationBbox(imagebox, (x_point, y_point), frameon=False)
        plt.gca().add_artist(ab)
    combined_x.extend(x)
    combined_y.extend(y)
coefficients = np.polyfit(combined_x, combined_y, 1)
poly_fit = np.polyval(coefficients, np.array(combined_x))
residuals = combined_y - poly_fit
ss_residual = np.sum(residuals**2)
ss_total = np.sum((combined_y - np.mean(combined_y))**2)
r_squared = 1 - (ss_residual / ss_total)
r_value = np.sqrt(r_squared) * np.sign(coefficients[0])
plt.plot(np.sort(combined_x), np.polyval(coefficients, np.sort(combined_x)), color='red', linewidth=2)
plt.title(f"R = {r_value:.2f}")
plt.xlabel("Days Since Start Of Event")
plt.ylabel("Values")
if use_date_as_x:
    plt.xticks(
        np.arange(0, date_range + 1, step=1),
        [f"{(start_date + timedelta(days=i)).strftime('%b %d')}" for i in range(date_range + 1)],
        rotation=45
    )
else:
    num_ticks = 11
    tick_positions = np.linspace(0, date_range, num_ticks)
    tick_labels = [f"{int((pos / date_range) * 100)}%" for pos in tick_positions]
    plt.xticks(tick_positions, tick_labels, rotation=45)
plt.yticks(np.arange(0, 131, step=5))
plt.grid(axis='y')
plt.legend()
plt.xlim(0, date_range+0.3)
plt.ylim(0, 35)      
plt.tight_layout()
plt.show()

